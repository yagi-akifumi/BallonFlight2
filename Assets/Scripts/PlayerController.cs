using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerController : MonoBehaviour
{
    private string horizontal = "Horizontal";    // ???????????
    private string jump = "Jump";                // ???????????

    private Rigidbody2D rb;                      // ???????????
    private Animator anim;                       // ???????
    private float scale;                         // ??????????

    private float limitPosY = 4.5f;          // ???????

    public float moveSpeed;                      // ????
    public float jumpPower;                      // ????????

    [SerializeField, Header("Linecast? ????????")]
    private LayerMask groundLayer;
    public bool isGrounded;

    void Start()
    {
        // ????????????????????????
        rb = GetComponent<Rigidbody2D>();
        anim = GetComponent<Animator>();
        scale = transform.localScale.x;

    }

    void Update()
    {
        // ????  Physics2D.Linecast??????????Ground Layer????????????????????????????????????? true?????????? false ???
        isGrounded = Physics2D.Linecast(transform.position + transform.up * 0.4f, transform.position - transform.up * 1.8f, groundLayer);

        // Scene???? Physics2D.Linecast?????Line?????
        Debug.DrawLine(transform.position + transform.up * 0.4f, transform.position - transform.up * 1.8f, Color.red, 1.0f);



        // ????
        if (Input.GetButtonDown(jump))
        {    // InputManager ? Jump ????????????????????
            Jump();
        }

        // ???????(?????)?????????
        if (isGrounded == false && rb.velocity.y < 0.15f)
        {
            // ??????????
            anim.SetTrigger("Fall");
        }

        // Velocity.y ??? 5.0f ??????(?????????????)
        if (rb.velocity.y > 4.5f)
        {

            // Velocity.y ?????????(???????????????????????)
            rb.velocity = new Vector2(rb.velocity.x, 4.0f);
        }


    }

    /// <summary>
    /// ?????????
    /// </summary>
    private void Jump()
    {

        // ????????????????(???????)
        rb.AddForce(transform.up * jumpPower);

        // Jump(Up + Mid) ????????????
        anim.SetTrigger("Jump");
    }

    void FixedUpdate()
    {
        // ??
        Move();
    }

    /// <summary>
    /// ??
    /// </summary>
    private void Move()
    {

        // ??(?)????????
        float x = Input.GetAxis(horizontal);

        // x ??? 0 ?????? = ?????????
        if (x != 0)
        {

            // velocity(??)????????????
            rb.velocity = new Vector2(x * moveSpeed, rb.velocity.y);

            // temp ?????? localScale ????
            Vector3 temp = transform.localScale;

            // ???????? x ? temp.x ???
            temp.x = x;

            // ????????????????????????????????????            
            if (temp.x > 0)
            {

                //  ???0???????????1???
                temp.x = scale;

            }
            else
            {
                //  ???0???????????-1???
                temp.x = -scale;
            }

            // ????????????????
            transform.localScale = temp;

            // ???????????????????????????????
            anim.SetBool("Idle", false);   // ?????Idle ???????? false ??????????????????
            anim.SetFloat("Run", 0.5f);    // ????  Run ????????????0.5f ???????????????? greater 0.1 ????0.1 ???????????????Run ?????????????

        }
        else
        {
            //  ??????????????????0??????????
            rb.velocity = new Vector2(0, rb.velocity.y);

            //  ???????????????????????????????
            anim.SetFloat("Run", 0.0f);     // ????  Run ????????????0.f ???????????????? less 0.1 ????0.1 ???????????????Run ?????????????
            anim.SetBool("Idle", true);     // ?????Idle ???????? true ??????????????????
        }

        // ??????????????????????????????????????????????
        float posY = Mathf.Clamp(transform.position.y, -limitPosY, limitPosY);

        // ????????(????????????????????????)
        transform.position = new Vector2(transform.position.x, posY);

    }
}